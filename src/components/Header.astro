---
import type { Language, LanguagePath } from "@/common/types";
import { getIntlData } from "@/customize/intl";
import { supportedLang } from "@/customize/lang";
import Search from "./widget/Search.vue";
import Navigation from "./widget/Navigation.astro";

interface Props {
    lang: Language;
    langPaths?: LanguagePath[];
}

const { lang, langPaths } = Astro.props;

const intlData = getIntlData(lang);

function getLangUrl(lang: Language): string {
    let path: string = "";
    if (langPaths) {
        path = langPaths.find((langPath) => langPath.lang === lang)?.path ?? "";
    }
    if (path === "") {
        const pathSplit = Astro.url.pathname.split("/");
        if (pathSplit.length > 2) {
            path = `/${pathSplit.slice(2).join("/")}`;
        } else {
            path = "";
        }
    }
    return `/${lang.locale}${path}`;
}
---

<header>
    <nav class="md:relative lg:top-0 border-b-[1px]">
        <div class="flex flex-row items-center justify-between py-4">
            <div class="flex flex-row items-center">
                <a
                    class="ml-2 mr-4 md:text-xl font-bold"
                    href={`/${lang.locale}`}>Chinese Words</a
                >
                <div class="hidden md:block">
                    <Navigation lang={lang} />
                </div>
            </div>
            <div class="flex flex-row items-center">
                <div
                    class="lg:block lg:absolute lg:left-1/2 lg:transform lg:-translate-x-1/2 lg:w-1/4 md:mx-2"
                >
                    <Search intlData={intlData} lang={lang} client:load />
                </div>
                <select name="language" class="hidden md:block language-select">
                    {
                        supportedLang.map((l) => (
                            <option value={getLangUrl(l)} selected={l === lang}>
                                {l.name}
                            </option>
                        ))
                    }
                </select>
                <div class="md:hidden">
                    <button
                        type="button"
                        class="p-2 rounded-md"
                        aria-controls="mobile-menu"
                        aria-expanded="false"
                    >
                        <svg
                            class="h-6 w-6"
                            xmlns="http://www.w3.org/2000/svg"
                            fill="none"
                            viewBox="0 0 24 24"
                            stroke="currentColor"
                            aria-hidden="true"
                        >
                            <path
                                stroke-linecap="round"
                                stroke-linejoin="round"
                                stroke-width="2"
                                d="M4 6h16M4 12h16m-7 6h7"></path>
                        </svg>
                    </button>
                </div>
            </div>
        </div>
        <div
            class="md:hidden pb-4 flex flex-row items-center justify-between"
            id="mobile-menu"
        >
            <Navigation lang={lang} />
            <select name="language" class="language-select">
                {
                    supportedLang.map((l) => (
                        <option value={getLangUrl(l)} selected={l === lang}>
                            {l.name}
                        </option>
                    ))
                }
            </select>
        </div>
    </nav>
</header>

<script>
    import { navigate } from "astro:transitions/client";

    function addLanguageSelectListener(cls: string) {
        const languageSelects = document.querySelectorAll(`.${cls}`);
        for (let ls of languageSelects) {
            ls.addEventListener("change", (e) => {
                let elem = e.target as HTMLSelectElement;
                navigate(elem.value);
            });
        }
    }

    function addMobileMenuListener() {
        const menuButton = document.querySelector(
            'button[aria-controls="mobile-menu"]'
        );
        const mobileMenu = document.getElementById("mobile-menu");
        menuButton?.addEventListener("click", () => {
            const isExpanded =
                menuButton.getAttribute("aria-expanded") === "true";
            menuButton.setAttribute("aria-expanded", (!isExpanded).toString());
            mobileMenu?.classList.toggle("hidden");
        });
    }
    addLanguageSelectListener("language-select");
    addMobileMenuListener();

    document.addEventListener("astro:after-swap", () => {
        addLanguageSelectListener("language-select");
        addMobileMenuListener();
    });
</script>
